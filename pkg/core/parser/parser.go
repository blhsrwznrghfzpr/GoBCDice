// Code generated by goyacc - DO NOT EDIT.

/*
BCDiceコマンドの構文解析処理のパッケージ。

BCDiceのコマンドはLALR(1)文法で表現できる。
BCDiceコマンドのLALR(1)構文解析器は、goyaccを使用して生成する。
*/
package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"github.com/raa0121/GoBCDice/pkg/core/ast"
	"github.com/raa0121/GoBCDice/pkg/core/lexer"
	"github.com/raa0121/GoBCDice/pkg/core/token"
	"strconv"
)

type yySymType struct {
	yys   int
	token token.Token
	node  ast.Node
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57373
	yyEofCode = 57344
	ASTERISK  = 57351
	B_ROLL    = 57364
	CALC      = 57369
	CHOICE    = 57370
	DIAMOND   = 57358
	DOTS      = 57368
	D_ROLL    = 57363
	EQ        = 57353
	GT        = 57355
	GTEQ      = 57357
	IDENT     = 57347
	ILLEGAL   = 57346
	INT       = 57348
	LT        = 57354
	LTEQ      = 57356
	L_BRACKET = 57361
	L_PAREN   = 57359
	MINUS     = 57350
	PLUS      = 57349
	R         = 57365
	R_BRACKET = 57362
	R_PAREN   = 57360
	SECRET    = 57367
	SLASH     = 57352
	U         = 57366
	UMINUS    = 57372
	UPLUS     = 57371
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -65
)

var (
	yyPrec = map[int]int{
		EQ:       0,
		LT:       0,
		GT:       0,
		LTEQ:     0,
		GTEQ:     0,
		DIAMOND:  0,
		PLUS:     1,
		MINUS:    1,
		ASTERISK: 2,
		SLASH:    2,
		D_ROLL:   3,
		DOTS:     4,
		UPLUS:    5,
		UMINUS:   5,
	}

	yyXLAT = map[int]int{
		57350: 0,  // MINUS (120x)
		57349: 1,  // PLUS (120x)
		57351: 2,  // ASTERISK (82x)
		57352: 3,  // SLASH (82x)
		57360: 4,  // R_PAREN (74x)
		57344: 5,  // $end (65x)
		57365: 6,  // R (64x)
		57366: 7,  // U (64x)
		57358: 8,  // DIAMOND (46x)
		57353: 9,  // EQ (46x)
		57355: 10, // GT (46x)
		57357: 11, // GTEQ (46x)
		57354: 12, // LT (46x)
		57356: 13, // LTEQ (46x)
		57378: 14, // int (44x)
		57348: 15, // INT (44x)
		57359: 16, // L_PAREN (44x)
		57361: 17, // L_BRACKET (23x)
		57381: 18, // rand (23x)
		57380: 19, // int_rand_expr (21x)
		57379: 20, // int_expr (17x)
		57375: 21, // d_roll (12x)
		57377: 22, // d_roll_expr (12x)
		57363: 23, // D_ROLL (8x)
		57362: 24, // R_BRACKET (5x)
		57368: 25, // DOTS (3x)
		57369: 26, // CALC (1x)
		57374: 27, // command (1x)
		57376: 28, // d_roll_comp (1x)
		57373: 29, // $default (0x)
		57364: 30, // B_ROLL (0x)
		57370: 31, // CHOICE (0x)
		57345: 32, // error (0x)
		57347: 33, // IDENT (0x)
		57346: 34, // ILLEGAL (0x)
		57367: 35, // SECRET (0x)
		57372: 36, // UMINUS (0x)
		57371: 37, // UPLUS (0x)
	}

	yySymNames = []string{
		"MINUS",
		"PLUS",
		"ASTERISK",
		"SLASH",
		"R_PAREN",
		"$end",
		"R",
		"U",
		"DIAMOND",
		"EQ",
		"GT",
		"GTEQ",
		"LT",
		"LTEQ",
		"int",
		"INT",
		"L_PAREN",
		"L_BRACKET",
		"rand",
		"int_rand_expr",
		"int_expr",
		"d_roll",
		"d_roll_expr",
		"D_ROLL",
		"R_BRACKET",
		"DOTS",
		"CALC",
		"command",
		"d_roll_comp",
		"$default",
		"B_ROLL",
		"CHOICE",
		"error",
		"IDENT",
		"ILLEGAL",
		"SECRET",
		"UMINUS",
		"UPLUS",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {27, 1},
		2:  {27, 1},
		3:  {27, 4},
		4:  {20, 1},
		5:  {20, 3},
		6:  {20, 2},
		7:  {20, 2},
		8:  {20, 3},
		9:  {20, 3},
		10: {20, 3},
		11: {20, 3},
		12: {20, 4},
		13: {20, 4},
		14: {19, 1},
		15: {19, 1},
		16: {19, 3},
		17: {19, 2},
		18: {19, 2},
		19: {19, 3},
		20: {19, 3},
		21: {19, 3},
		22: {19, 3},
		23: {19, 4},
		24: {19, 4},
		25: {22, 1},
		26: {22, 3},
		27: {22, 2},
		28: {22, 2},
		29: {22, 3},
		30: {22, 3},
		31: {22, 3},
		32: {22, 3},
		33: {22, 4},
		34: {22, 4},
		35: {22, 3},
		36: {22, 3},
		37: {22, 3},
		38: {22, 3},
		39: {22, 4},
		40: {22, 4},
		41: {22, 3},
		42: {22, 3},
		43: {22, 3},
		44: {22, 3},
		45: {22, 4},
		46: {22, 4},
		47: {28, 3},
		48: {28, 3},
		49: {28, 3},
		50: {28, 3},
		51: {28, 3},
		52: {28, 3},
		53: {21, 3},
		54: {21, 3},
		55: {21, 3},
		56: {21, 3},
		57: {21, 5},
		58: {21, 5},
		59: {21, 7},
		60: {18, 5},
		61: {18, 7},
		62: {18, 7},
		63: {18, 9},
		64: {14, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [136][]uint16{
		// 0
		{73, 74, 14: 70, 78, 72, 77, 71, 75, 21: 76, 67, 26: 69, 66, 68},
		{5: 65},
		{122, 121, 123, 124, 5: 64, 8: 194, 189, 191, 193, 190, 192},
		{5: 63},
		{16: 186},
		// 5
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 23: 180},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 23: 177},
		{73, 74, 14: 70, 78, 72, 77, 71, 151, 21: 76, 152},
		{73, 74, 14: 70, 78, 72, 77, 71, 149, 21: 76, 150},
		{73, 74, 14: 70, 78, 72, 77, 71, 147, 21: 76, 148},
		// 10
		{116, 115, 117, 118},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{14: 79, 78, 80},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23: 1, 1, 1},
		{25: 108},
		// 15
		{83, 84, 14: 81, 78, 82, 20: 85},
		{61, 61, 61, 61, 61, 61, 61, 61},
		{83, 84, 14: 81, 78, 82, 20: 106},
		{83, 84, 14: 81, 78, 82, 20: 105},
		{83, 84, 14: 81, 78, 82, 20: 104},
		// 20
		{87, 86, 88, 89, 90},
		{83, 84, 14: 81, 78, 82, 20: 103},
		{83, 84, 14: 81, 78, 82, 20: 102},
		{83, 84, 14: 81, 78, 82, 20: 101},
		{83, 84, 14: 81, 78, 82, 20: 98},
		// 25
		{25: 91},
		{14: 92, 78, 93},
		{24: 97},
		{83, 84, 14: 81, 78, 82, 20: 94},
		{87, 86, 88, 89, 95},
		// 30
		{24: 96},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 23: 2},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 23: 4},
		{54, 54, 54, 54, 54, 54, 100, 99},
		{53, 53, 53, 53, 53, 53, 53, 53},
		// 35
		{52, 52, 52, 52, 52, 52, 52, 52},
		{55, 55, 55, 55, 55, 55, 55, 55},
		{56, 56, 88, 89, 56, 56, 56, 56},
		{57, 57, 88, 89, 57, 57, 57, 57},
		{58, 58, 58, 58, 58, 58, 58, 58},
		// 40
		{59, 59, 59, 59, 59, 59, 59, 59},
		{87, 86, 88, 89, 107},
		{60, 60, 60, 60, 60, 60, 60, 60},
		{14: 109, 78, 110},
		{24: 114},
		// 45
		{83, 84, 14: 81, 78, 82, 20: 111},
		{87, 86, 88, 89, 112},
		{24: 113},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 23: 3},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 23: 5},
		// 50
		{73, 74, 14: 70, 78, 72, 77, 71, 145, 21: 76, 146},
		{73, 74, 14: 70, 78, 72, 77, 71, 143, 21: 76, 144},
		{73, 74, 14: 70, 78, 72, 77, 71, 141, 21: 76, 142},
		{73, 74, 14: 70, 78, 72, 77, 71, 119, 21: 76, 120},
		{43, 43, 43, 43, 43, 43, 140, 139, 43, 43, 43, 43, 43, 43},
		// 55
		{27, 27, 27, 27, 27, 27, 126, 125, 27, 27, 27, 27, 27, 27},
		{73, 74, 14: 70, 78, 72, 77, 71, 137, 21: 76, 138},
		{73, 74, 14: 70, 78, 72, 77, 71, 135, 21: 76, 136},
		{73, 74, 14: 70, 78, 72, 77, 71, 133, 21: 76, 134},
		{73, 74, 14: 70, 78, 72, 77, 71, 127, 21: 76, 128},
		// 60
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{21, 21, 21, 21, 21, 21, 132, 131, 21, 21, 21, 21, 21, 21},
		{33, 33, 33, 33, 33, 33, 130, 129, 33, 33, 33, 33, 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		// 65
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		// 70
		{23, 23, 117, 118, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{35, 35, 123, 124, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{24, 24, 117, 118, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{36, 36, 123, 124, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 75
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{45, 45, 117, 118, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{29, 29, 123, 124, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		// 80
		{46, 46, 117, 118, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{30, 30, 123, 124, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		// 85
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{116, 115, 117, 118, 154},
		{122, 121, 123, 124, 153},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 23: 155},
		// 90
		{14: 156, 78, 157},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{161, 162, 14: 158, 78, 160, 77, 159, 163},
		{51, 51, 51, 51, 51, 6: 51, 51},
		{50, 50, 50, 50, 50, 6: 50, 50},
		// 95
		{161, 162, 14: 158, 78, 160, 77, 159, 175},
		{161, 162, 14: 158, 78, 160, 77, 159, 174},
		{161, 162, 14: 158, 78, 160, 77, 159, 173},
		{165, 164, 166, 167, 168},
		{161, 162, 14: 158, 78, 160, 77, 159, 172},
		// 100
		{161, 162, 14: 158, 78, 160, 77, 159, 171},
		{161, 162, 14: 158, 78, 160, 77, 159, 170},
		{161, 162, 14: 158, 78, 160, 77, 159, 169},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{43, 43, 43, 43, 43, 6: 140, 139},
		// 105
		{44, 44, 44, 44, 44, 6: 44, 44},
		{45, 45, 166, 167, 45, 6: 45, 45},
		{46, 46, 166, 167, 46, 6: 46, 46},
		{47, 47, 47, 47, 47, 6: 47, 47},
		{48, 48, 48, 48, 48, 6: 48, 48},
		// 110
		{165, 164, 166, 167, 176},
		{49, 49, 49, 49, 49, 6: 49, 49},
		{14: 178, 78, 17: 77, 179},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 115
		{14: 181, 78, 183, 77, 182},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{161, 162, 14: 158, 78, 160, 77, 159, 184},
		{165, 164, 166, 167, 185},
		// 120
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{83, 84, 14: 81, 78, 82, 20: 187},
		{87, 86, 88, 89, 188},
		{5: 62},
		{83, 84, 14: 81, 78, 82, 20: 200},
		// 125
		{83, 84, 14: 81, 78, 82, 20: 199},
		{83, 84, 14: 81, 78, 82, 20: 198},
		{83, 84, 14: 81, 78, 82, 20: 197},
		{83, 84, 14: 81, 78, 82, 20: 196},
		{83, 84, 14: 81, 78, 82, 20: 195},
		// 130
		{87, 86, 88, 89, 5: 13},
		{87, 86, 88, 89, 5: 14},
		{87, 86, 88, 89, 5: 15},
		{87, 86, 88, 89, 5: 16},
		{87, 86, 88, 89, 5: 17},
		// 135
		{87, 86, 88, 89, 5: 18},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 32

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.node = ast.NewDRollExpr(yyS[yypt-0].node.Token(), yyS[yypt-0].node)
			yylex.(*LexerWrapper).ast = yyVAL.node
		}
	case 2:
		{
			yyVAL.node = ast.NewDRollComp(yyS[yypt-0].node.Token(), yyS[yypt-0].node)
			yylex.(*LexerWrapper).ast = yyVAL.node
		}
	case 3:
		{
			yyVAL.node = ast.NewCalc(yyS[yypt-3].token, yyS[yypt-1].node)
			yylex.(*LexerWrapper).ast = yyVAL.node
		}
	case 5:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 6:
		{
			yyVAL.node = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 7:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 8:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 9:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 10:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 11:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 12:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 13:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 16:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 17:
		{
			yyVAL.node = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 18:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 19:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 20:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 21:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 22:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 23:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 24:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 26:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 27:
		{
			yyVAL.node = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 28:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 29:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 30:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 31:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 32:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 33:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 34:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 35:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 36:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 37:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 38:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 39:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 40:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 41:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 42:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 43:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 44:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 45:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 46:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 47:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 48:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 49:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 50:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 51:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 52:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 53:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 54:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 55:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 56:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 57:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-3].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 58:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-4].node, yyS[yypt-3].token, yyS[yypt-1].node)
		}
	case 59:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-5].node, yyS[yypt-3].token, yyS[yypt-1].node)
		}
	case 60:
		{
			yyVAL.node = ast.NewRandomNumber(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 61:
		{
			yyVAL.node = ast.NewRandomNumber(yyS[yypt-4].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 62:
		{
			yyVAL.node = ast.NewRandomNumber(yyS[yypt-5].node, yyS[yypt-4].token, yyS[yypt-2].node)
		}
	case 63:
		{
			yyVAL.node = ast.NewRandomNumber(yyS[yypt-6].node, yyS[yypt-4].token, yyS[yypt-2].node)
		}
	case 64:
		{
			// TODO: 整数が大きすぎるときなどのエラー処理が必要
			value, _ := strconv.Atoi(yyS[yypt-0].token.Literal)

			yyVAL.node = ast.NewInt(value, yyS[yypt-0].token)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// 字句解析器をyyParseで使用できるようにするためのラッパー。
type LexerWrapper struct {
	// 入力文字列
	Input string
	// 現在の桁
	Column int
	// 現在のルートノード
	ast ast.Node
	// 字句解析器
	lexer *lexer.Lexer
	// エラーの内容
	err string
}

// トークンの種類とyyParseで使用する定数との対応
var tokenTypeToYYTokenType = map[token.TokenType]int{
	token.ILLEGAL: ILLEGAL,

	token.IDENT: IDENT,
	token.INT:   INT,

	token.PLUS:     PLUS,
	token.MINUS:    MINUS,
	token.ASTERISK: ASTERISK,
	token.SLASH:    SLASH,

	token.EQ:      EQ,
	token.LT:      LT,
	token.GT:      GT,
	token.LTEQ:    LTEQ,
	token.GTEQ:    GTEQ,
	token.DIAMOND: DIAMOND,

	token.L_PAREN:   L_PAREN,
	token.R_PAREN:   R_PAREN,
	token.L_BRACKET: L_BRACKET,
	token.R_BRACKET: R_BRACKET,

	token.D_ROLL: D_ROLL,
	token.B_ROLL: B_ROLL,
	token.R:      R,
	token.U:      U,
	token.SECRET: SECRET,
	token.DOTS:   DOTS,

	token.CALC:   CALC,
	token.CHOICE: CHOICE,
}

// newLexerWrapper は新しい字句解析器ラッパーを作る。
//
// input: 入力文字列
func newLexerWrapper(input string) *LexerWrapper {
	lw := &LexerWrapper{
		Input: input,
		lexer: lexer.New(input),
	}

	return lw
}

// Lex は次のトークンを読み込み、対応する定数を返す。
//
// 文字列の終端に達した場合は0を返す。
func (lw *LexerWrapper) Lex(lval *yySymType) int {
	tok := lw.lexer.NextToken()
	lw.Column = tok.Column

	if tok.Type == token.EOT {
		return 0
	}

	lval.token = tok

	yyTokenType, ok := tokenTypeToYYTokenType[tok.Type]
	if !ok {
		return ILLEGAL
	}

	return yyTokenType
}

// Error は発生したエラーを記録する。
func (lw *LexerWrapper) Error(e string) {
	lw.err = fmt.Sprintf("column %d: %s", lw.Column, e)
}

// Parse は入力文字列をBCDiceコマンドとして構文解析する。
// 構文解析に成功した場合は、抽象構文木のルートノードを返す。
// 構文解析に失敗した場合は、エラーを返す。
func Parse(input string) (ast.Node, error) {
	lw := newLexerWrapper(input)

	if yyParse(lw) != 0 {
		return nil, fmt.Errorf(lw.err)
	} else {
		return lw.ast, nil
	}
}

/* vim: set filetype=goyacc: */
