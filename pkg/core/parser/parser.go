// Code generated by goyacc - DO NOT EDIT.

/*
BCDiceコマンドの構文解析処理のパッケージ。

BCDiceのコマンドはLALR(1)文法で表現できる。
BCDiceコマンドのLALR(1)構文解析器は、goyaccを使用して生成する。
*/
package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"github.com/raa0121/GoBCDice/pkg/core/ast"
	"github.com/raa0121/GoBCDice/pkg/core/lexer"
	"github.com/raa0121/GoBCDice/pkg/core/token"
	"strconv"
)

type yySymType struct {
	yys   int
	token token.Token
	expr  ast.Node
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57370
	yyEofCode = 57344
	ASTERISK  = 57351
	B_ROLL    = 57361
	CALC      = 57366
	CHOICE    = 57367
	DOTS      = 57365
	D_ROLL    = 57360
	EQ        = 57353
	GT        = 57355
	IDENT     = 57347
	ILLEGAL   = 57346
	INT       = 57348
	LT        = 57354
	L_BRACKET = 57358
	L_PAREN   = 57356
	MINUS     = 57350
	PLUS      = 57349
	R         = 57362
	R_BRACKET = 57359
	R_PAREN   = 57357
	SECRET    = 57364
	SLASH     = 57352
	U         = 57363
	UMINUS    = 57369
	UPLUS     = 57368
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -58
)

var (
	yyPrec = map[int]int{
		PLUS:     0,
		MINUS:    0,
		ASTERISK: 1,
		SLASH:    1,
		D_ROLL:   2,
		DOTS:     3,
		UPLUS:    4,
		UMINUS:   4,
	}

	yyXLAT = map[int]int{
		57350: 0,  // MINUS (108x)
		57349: 1,  // PLUS (108x)
		57351: 2,  // ASTERISK (76x)
		57352: 3,  // SLASH (76x)
		57357: 4,  // R_PAREN (74x)
		57362: 5,  // R (64x)
		57363: 6,  // U (64x)
		57344: 7,  // $end (48x)
		57348: 8,  // INT (38x)
		57374: 9,  // int (38x)
		57356: 10, // L_PAREN (38x)
		57358: 11, // L_BRACKET (23x)
		57377: 12, // rand (23x)
		57376: 13, // int_rand_expr (21x)
		57372: 14, // d_roll (12x)
		57373: 15, // d_roll_expr (12x)
		57375: 16, // int_expr (11x)
		57360: 17, // D_ROLL (8x)
		57359: 18, // R_BRACKET (5x)
		57365: 19, // DOTS (3x)
		57366: 20, // CALC (1x)
		57371: 21, // command (1x)
		57370: 22, // $default (0x)
		57361: 23, // B_ROLL (0x)
		57367: 24, // CHOICE (0x)
		57353: 25, // EQ (0x)
		57345: 26, // error (0x)
		57355: 27, // GT (0x)
		57347: 28, // IDENT (0x)
		57346: 29, // ILLEGAL (0x)
		57354: 30, // LT (0x)
		57364: 31, // SECRET (0x)
		57369: 32, // UMINUS (0x)
		57368: 33, // UPLUS (0x)
	}

	yySymNames = []string{
		"MINUS",
		"PLUS",
		"ASTERISK",
		"SLASH",
		"R_PAREN",
		"R",
		"U",
		"$end",
		"INT",
		"int",
		"L_PAREN",
		"L_BRACKET",
		"rand",
		"int_rand_expr",
		"d_roll",
		"d_roll_expr",
		"int_expr",
		"D_ROLL",
		"R_BRACKET",
		"DOTS",
		"CALC",
		"command",
		"$default",
		"B_ROLL",
		"CHOICE",
		"EQ",
		"error",
		"GT",
		"IDENT",
		"ILLEGAL",
		"LT",
		"SECRET",
		"UMINUS",
		"UPLUS",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {21, 1},
		2:  {21, 4},
		3:  {16, 1},
		4:  {16, 3},
		5:  {16, 2},
		6:  {16, 2},
		7:  {16, 3},
		8:  {16, 3},
		9:  {16, 3},
		10: {16, 3},
		11: {16, 4},
		12: {16, 4},
		13: {13, 1},
		14: {13, 1},
		15: {13, 3},
		16: {13, 2},
		17: {13, 2},
		18: {13, 3},
		19: {13, 3},
		20: {13, 3},
		21: {13, 3},
		22: {13, 4},
		23: {13, 4},
		24: {15, 1},
		25: {15, 3},
		26: {15, 2},
		27: {15, 2},
		28: {15, 3},
		29: {15, 3},
		30: {15, 3},
		31: {15, 3},
		32: {15, 4},
		33: {15, 4},
		34: {15, 3},
		35: {15, 3},
		36: {15, 3},
		37: {15, 3},
		38: {15, 4},
		39: {15, 4},
		40: {15, 3},
		41: {15, 3},
		42: {15, 3},
		43: {15, 3},
		44: {15, 4},
		45: {15, 4},
		46: {14, 3},
		47: {14, 3},
		48: {14, 3},
		49: {14, 3},
		50: {14, 5},
		51: {14, 5},
		52: {14, 7},
		53: {12, 5},
		54: {12, 7},
		55: {12, 7},
		56: {12, 9},
		57: {9, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [123][]uint16{
		// 0
		{65, 66, 8: 70, 62, 64, 69, 63, 67, 68, 60, 20: 61, 59},
		{7: 58},
		{114, 113, 115, 116, 7: 57},
		{10: 178},
		{45, 45, 45, 45, 45, 45, 45, 45, 17: 172},
		// 5
		{44, 44, 44, 44, 44, 44, 44, 44, 17: 169},
		{65, 66, 8: 70, 62, 64, 69, 63, 143, 68, 144},
		{65, 66, 8: 70, 62, 64, 69, 63, 141, 68, 142},
		{65, 66, 8: 70, 62, 64, 69, 63, 139, 68, 140},
		{108, 107, 109, 110},
		// 10
		{34, 34, 34, 34, 34, 34, 34, 34},
		{8: 70, 71, 72},
		{1, 1, 1, 1, 1, 1, 1, 1, 17: 1, 1, 1},
		{19: 100},
		{75, 76, 8: 70, 73, 74, 16: 77},
		// 15
		{55, 55, 55, 55, 55, 55, 55},
		{75, 76, 8: 70, 73, 74, 16: 98},
		{75, 76, 8: 70, 73, 74, 16: 97},
		{75, 76, 8: 70, 73, 74, 16: 96},
		{79, 78, 80, 81, 82},
		// 20
		{75, 76, 8: 70, 73, 74, 16: 95},
		{75, 76, 8: 70, 73, 74, 16: 94},
		{75, 76, 8: 70, 73, 74, 16: 93},
		{75, 76, 8: 70, 73, 74, 16: 90},
		{19: 83},
		// 25
		{8: 70, 84, 85},
		{18: 89},
		{75, 76, 8: 70, 73, 74, 16: 86},
		{79, 78, 80, 81, 87},
		{18: 88},
		// 30
		{2, 2, 2, 2, 2, 2, 2, 2, 17: 2},
		{4, 4, 4, 4, 4, 4, 4, 4, 17: 4},
		{48, 48, 48, 48, 48, 92, 91},
		{47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 46},
		// 35
		{49, 49, 49, 49, 49, 49, 49},
		{50, 50, 80, 81, 50, 50, 50},
		{51, 51, 80, 81, 51, 51, 51},
		{52, 52, 52, 52, 52, 52, 52},
		{53, 53, 53, 53, 53, 53, 53},
		// 40
		{79, 78, 80, 81, 99},
		{54, 54, 54, 54, 54, 54, 54},
		{8: 70, 101, 102},
		{18: 106},
		{75, 76, 8: 70, 73, 74, 16: 103},
		// 45
		{79, 78, 80, 81, 104},
		{18: 105},
		{3, 3, 3, 3, 3, 3, 3, 3, 17: 3},
		{5, 5, 5, 5, 5, 5, 5, 5, 17: 5},
		{65, 66, 8: 70, 62, 64, 69, 63, 137, 68, 138},
		// 50
		{65, 66, 8: 70, 62, 64, 69, 63, 135, 68, 136},
		{65, 66, 8: 70, 62, 64, 69, 63, 133, 68, 134},
		{65, 66, 8: 70, 62, 64, 69, 63, 111, 68, 112},
		{37, 37, 37, 37, 37, 132, 131, 37},
		{21, 21, 21, 21, 21, 118, 117, 21},
		// 55
		{65, 66, 8: 70, 62, 64, 69, 63, 129, 68, 130},
		{65, 66, 8: 70, 62, 64, 69, 63, 127, 68, 128},
		{65, 66, 8: 70, 62, 64, 69, 63, 125, 68, 126},
		{65, 66, 8: 70, 62, 64, 69, 63, 119, 68, 120},
		{20, 20, 20, 20, 20, 20, 20, 20},
		// 60
		{19, 19, 19, 19, 19, 19, 19, 19},
		{15, 15, 15, 15, 15, 124, 123, 15},
		{27, 27, 27, 27, 27, 122, 121, 27},
		{26, 26, 26, 26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25},
		// 65
		{14, 14, 14, 14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13},
		{16, 16, 16, 16, 16, 16, 16, 16},
		{28, 28, 28, 28, 28, 28, 28, 28},
		{17, 17, 109, 110, 17, 17, 17, 17},
		// 70
		{29, 29, 115, 116, 29, 29, 29, 29},
		{18, 18, 109, 110, 18, 18, 18, 18},
		{30, 30, 115, 116, 30, 30, 30, 30},
		{36, 36, 36, 36, 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35},
		// 75
		{38, 38, 38, 38, 38, 38, 38, 38},
		{22, 22, 22, 22, 22, 22, 22, 22},
		{39, 39, 109, 110, 39, 39, 39, 39},
		{23, 23, 115, 116, 23, 23, 23, 23},
		{40, 40, 109, 110, 40, 40, 40, 40},
		// 80
		{24, 24, 115, 116, 24, 24, 24, 24},
		{41, 41, 41, 41, 41, 41, 41, 41},
		{31, 31, 31, 31, 31, 31, 31, 31},
		{42, 42, 42, 42, 42, 42, 42, 42},
		{32, 32, 32, 32, 32, 32, 32, 32},
		// 85
		{108, 107, 109, 110, 146},
		{114, 113, 115, 116, 145},
		{33, 33, 33, 33, 33, 33, 33, 33},
		{43, 43, 43, 43, 43, 43, 43, 43, 17: 147},
		{8: 70, 148, 149},
		// 90
		{8, 8, 8, 8, 8, 8, 8, 8},
		{153, 154, 8: 70, 150, 152, 69, 151, 155},
		{45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 44},
		{153, 154, 8: 70, 150, 152, 69, 151, 167},
		// 95
		{153, 154, 8: 70, 150, 152, 69, 151, 166},
		{153, 154, 8: 70, 150, 152, 69, 151, 165},
		{157, 156, 158, 159, 160},
		{153, 154, 8: 70, 150, 152, 69, 151, 164},
		{153, 154, 8: 70, 150, 152, 69, 151, 163},
		// 100
		{153, 154, 8: 70, 150, 152, 69, 151, 162},
		{153, 154, 8: 70, 150, 152, 69, 151, 161},
		{6, 6, 6, 6, 6, 6, 6, 6},
		{37, 37, 37, 37, 37, 132, 131},
		{38, 38, 38, 38, 38, 38, 38},
		// 105
		{39, 39, 158, 159, 39, 39, 39},
		{40, 40, 158, 159, 40, 40, 40},
		{41, 41, 41, 41, 41, 41, 41},
		{42, 42, 42, 42, 42, 42, 42},
		{157, 156, 158, 159, 168},
		// 110
		{43, 43, 43, 43, 43, 43, 43},
		{8: 70, 170, 11: 69, 171},
		{11, 11, 11, 11, 11, 11, 11, 11},
		{9, 9, 9, 9, 9, 9, 9, 9},
		{8: 70, 173, 175, 69, 174},
		// 115
		{12, 12, 12, 12, 12, 12, 12, 12},
		{10, 10, 10, 10, 10, 10, 10, 10},
		{153, 154, 8: 70, 150, 152, 69, 151, 176},
		{157, 156, 158, 159, 177},
		{7, 7, 7, 7, 7, 7, 7, 7},
		// 120
		{75, 76, 8: 70, 73, 74, 16: 179},
		{79, 78, 80, 81, 180},
		{7: 56},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 26

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.expr = ast.NewDRollExpr(yyS[yypt-0].expr.Token(), yyS[yypt-0].expr)
			yylex.(*LexerWrapper).ast = yyVAL.expr
		}
	case 2:
		{
			yyVAL.expr = ast.NewCalc(yyS[yypt-3].token, yyS[yypt-1].expr)
			yylex.(*LexerWrapper).ast = yyVAL.expr
		}
	case 4:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 5:
		{
			yyVAL.expr = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 6:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 7:
		{
			yyVAL.expr = ast.NewAdd(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 8:
		{
			yyVAL.expr = ast.NewSubtract(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 9:
		{
			yyVAL.expr = ast.NewMultiply(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 10:
		{
			yyVAL.expr = ast.NewDivideWithRoundingDown(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 11:
		{
			yyVAL.expr = ast.NewDivideWithRoundingUp(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 12:
		{
			yyVAL.expr = ast.NewDivideWithRounding(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 15:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 16:
		{
			yyVAL.expr = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 17:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 18:
		{
			yyVAL.expr = ast.NewAdd(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 19:
		{
			yyVAL.expr = ast.NewSubtract(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 20:
		{
			yyVAL.expr = ast.NewMultiply(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 21:
		{
			yyVAL.expr = ast.NewDivideWithRoundingDown(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 22:
		{
			yyVAL.expr = ast.NewDivideWithRoundingUp(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 23:
		{
			yyVAL.expr = ast.NewDivideWithRounding(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 25:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 26:
		{
			yyVAL.expr = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 27:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 28:
		{
			yyVAL.expr = ast.NewAdd(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 29:
		{
			yyVAL.expr = ast.NewSubtract(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 30:
		{
			yyVAL.expr = ast.NewMultiply(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 31:
		{
			yyVAL.expr = ast.NewDivideWithRoundingDown(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 32:
		{
			yyVAL.expr = ast.NewDivideWithRoundingUp(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 33:
		{
			yyVAL.expr = ast.NewDivideWithRounding(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 34:
		{
			yyVAL.expr = ast.NewAdd(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 35:
		{
			yyVAL.expr = ast.NewSubtract(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 36:
		{
			yyVAL.expr = ast.NewMultiply(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 37:
		{
			yyVAL.expr = ast.NewDivideWithRoundingDown(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 38:
		{
			yyVAL.expr = ast.NewDivideWithRoundingUp(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 39:
		{
			yyVAL.expr = ast.NewDivideWithRounding(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 40:
		{
			yyVAL.expr = ast.NewAdd(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 41:
		{
			yyVAL.expr = ast.NewSubtract(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 42:
		{
			yyVAL.expr = ast.NewMultiply(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 43:
		{
			yyVAL.expr = ast.NewDivideWithRoundingDown(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 44:
		{
			yyVAL.expr = ast.NewDivideWithRoundingUp(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 45:
		{
			yyVAL.expr = ast.NewDivideWithRounding(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 46:
		{
			yyVAL.expr = ast.NewDRoll(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 47:
		{
			yyVAL.expr = ast.NewDRoll(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 48:
		{
			yyVAL.expr = ast.NewDRoll(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 49:
		{
			yyVAL.expr = ast.NewDRoll(yyS[yypt-2].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 50:
		{
			yyVAL.expr = ast.NewDRoll(yyS[yypt-3].expr, yyS[yypt-1].token, yyS[yypt-0].expr)
		}
	case 51:
		{
			yyVAL.expr = ast.NewDRoll(yyS[yypt-4].expr, yyS[yypt-3].token, yyS[yypt-1].expr)
		}
	case 52:
		{
			yyVAL.expr = ast.NewDRoll(yyS[yypt-5].expr, yyS[yypt-3].token, yyS[yypt-1].expr)
		}
	case 53:
		{
			yyVAL.expr = ast.NewRandomNumber(yyS[yypt-3].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 54:
		{
			yyVAL.expr = ast.NewRandomNumber(yyS[yypt-4].expr, yyS[yypt-2].token, yyS[yypt-1].expr)
		}
	case 55:
		{
			yyVAL.expr = ast.NewRandomNumber(yyS[yypt-5].expr, yyS[yypt-4].token, yyS[yypt-2].expr)
		}
	case 56:
		{
			yyVAL.expr = ast.NewRandomNumber(yyS[yypt-6].expr, yyS[yypt-4].token, yyS[yypt-2].expr)
		}
	case 57:
		{
			// TODO: 整数が大きすぎるときなどのエラー処理が必要
			value, _ := strconv.Atoi(yyS[yypt-0].token.Literal)

			yyVAL.expr = ast.NewInt(value, yyS[yypt-0].token)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// 字句解析器をyyParseで使用できるようにするためのラッパー。
type LexerWrapper struct {
	// 入力文字列
	Input string
	// 現在の桁
	Column int
	// 現在のルートノード
	ast ast.Node
	// 字句解析器
	lexer *lexer.Lexer
	// エラーの内容
	err string
}

// トークンの種類とyyParseで使用する定数との対応
var tokenTypeToYYTokenType = map[token.TokenType]int{
	token.ILLEGAL: ILLEGAL,

	token.IDENT: IDENT,
	token.INT:   INT,

	token.PLUS:     PLUS,
	token.MINUS:    MINUS,
	token.ASTERISK: ASTERISK,
	token.SLASH:    SLASH,

	token.EQ: EQ,
	token.LT: LT,
	token.GT: GT,

	token.L_PAREN:   L_PAREN,
	token.R_PAREN:   R_PAREN,
	token.L_BRACKET: L_BRACKET,
	token.R_BRACKET: R_BRACKET,

	token.D_ROLL: D_ROLL,
	token.B_ROLL: B_ROLL,
	token.R:      R,
	token.U:      U,
	token.SECRET: SECRET,
	token.DOTS:   DOTS,

	token.CALC:   CALC,
	token.CHOICE: CHOICE,
}

// newLexerWrapper は新しい字句解析器ラッパーを作る。
//
// input: 入力文字列
func newLexerWrapper(input string) *LexerWrapper {
	lw := &LexerWrapper{
		Input: input,
		lexer: lexer.New(input),
	}

	return lw
}

// Lex は次のトークンを読み込み、対応する定数を返す。
//
// 文字列の終端に達した場合は0を返す。
func (lw *LexerWrapper) Lex(lval *yySymType) int {
	tok := lw.lexer.NextToken()
	lw.Column = tok.Column

	if tok.Type == token.EOT {
		return 0
	}

	lval.token = tok

	return tokenTypeToYYTokenType[tok.Type]
}

// Error は発生したエラーを記録する。
func (lw *LexerWrapper) Error(e string) {
	lw.err = fmt.Sprintf("column %d: %s", lw.Column, e)
}

// Parse は入力文字列をBCDiceコマンドとして構文解析する。
// 構文解析に成功した場合は、抽象構文木のルートノードを返す。
// 構文解析に失敗した場合は、エラーを返す。
func Parse(input string) (ast.Node, error) {
	lw := newLexerWrapper(input)

	if yyParse(lw) != 0 {
		return nil, fmt.Errorf(lw.err)
	} else {
		return lw.ast, nil
	}
}

/* vim: set filetype=goyacc: */
