// Code generated by goyacc - DO NOT EDIT.

/*
BCDiceコマンドの構文解析処理のパッケージ。

BCDiceのコマンドはLALR(1)文法で表現できる。
BCDiceコマンドのLALR(1)構文解析器は、goyaccを使用して生成する。
*/
package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"github.com/raa0121/GoBCDice/pkg/core/ast"
	"github.com/raa0121/GoBCDice/pkg/core/lexer"
	"github.com/raa0121/GoBCDice/pkg/core/token"
	"strconv"
)

type yySymType struct {
	yys       int
	token     token.Token
	node      ast.Node
	bRoll     *ast.BRoll
	bRollList *ast.BRollList
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57373
	yyEofCode = 57344
	ASTERISK  = 57351
	B         = 57364
	CALC      = 57369
	CHOICE    = 57370
	D         = 57363
	DIAMOND   = 57358
	DOTS      = 57368
	EQ        = 57353
	GT        = 57355
	GTEQ      = 57357
	IDENT     = 57347
	ILLEGAL   = 57346
	INT       = 57348
	LT        = 57354
	LTEQ      = 57356
	L_BRACKET = 57361
	L_PAREN   = 57359
	MINUS     = 57350
	PLUS      = 57349
	R         = 57365
	R_BRACKET = 57362
	R_PAREN   = 57360
	SECRET    = 57367
	SLASH     = 57352
	U         = 57366
	UMINUS    = 57372
	UPLUS     = 57371
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -75
)

var (
	yyPrec = map[int]int{
		EQ:       0,
		LT:       0,
		GT:       0,
		LTEQ:     0,
		GTEQ:     0,
		DIAMOND:  0,
		PLUS:     1,
		MINUS:    1,
		ASTERISK: 2,
		SLASH:    2,
		D:        3,
		B:        3,
		DOTS:     4,
		UPLUS:    5,
		UMINUS:   5,
	}

	yyXLAT = map[int]int{
		57349: 0,  // PLUS (141x)
		57350: 1,  // MINUS (131x)
		57351: 2,  // ASTERISK (89x)
		57352: 3,  // SLASH (89x)
		57360: 4,  // R_PAREN (78x)
		57344: 5,  // $end (75x)
		57365: 6,  // R (64x)
		57366: 7,  // U (64x)
		57380: 8,  // int (52x)
		57348: 9,  // INT (52x)
		57359: 10, // L_PAREN (51x)
		57358: 11, // DIAMOND (46x)
		57353: 12, // EQ (46x)
		57355: 13, // GT (46x)
		57357: 14, // GTEQ (46x)
		57354: 15, // LT (46x)
		57356: 16, // LTEQ (46x)
		57361: 17, // L_BRACKET (30x)
		57383: 18, // rand (30x)
		57382: 19, // int_rand_expr (25x)
		57381: 20, // int_expr (17x)
		57377: 21, // d_roll (13x)
		57379: 22, // d_roll_expr (13x)
		57364: 23, // B (11x)
		57363: 24, // D (11x)
		57362: 25, // R_BRACKET (5x)
		57368: 26, // DOTS (3x)
		57374: 27, // b_roll (2x)
		57375: 28, // b_roll_list (1x)
		57369: 29, // CALC (1x)
		57376: 30, // command (1x)
		57378: 31, // d_roll_comp (1x)
		57373: 32, // $default (0x)
		57370: 33, // CHOICE (0x)
		57345: 34, // error (0x)
		57347: 35, // IDENT (0x)
		57346: 36, // ILLEGAL (0x)
		57367: 37, // SECRET (0x)
		57372: 38, // UMINUS (0x)
		57371: 39, // UPLUS (0x)
	}

	yySymNames = []string{
		"PLUS",
		"MINUS",
		"ASTERISK",
		"SLASH",
		"R_PAREN",
		"$end",
		"R",
		"U",
		"int",
		"INT",
		"L_PAREN",
		"DIAMOND",
		"EQ",
		"GT",
		"GTEQ",
		"LT",
		"LTEQ",
		"L_BRACKET",
		"rand",
		"int_rand_expr",
		"int_expr",
		"d_roll",
		"d_roll_expr",
		"B",
		"D",
		"R_BRACKET",
		"DOTS",
		"b_roll",
		"b_roll_list",
		"CALC",
		"command",
		"d_roll_comp",
		"$default",
		"CHOICE",
		"error",
		"IDENT",
		"ILLEGAL",
		"SECRET",
		"UMINUS",
		"UPLUS",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {30, 1},
		2:  {30, 1},
		3:  {30, 1},
		4:  {30, 4},
		5:  {20, 1},
		6:  {20, 3},
		7:  {20, 2},
		8:  {20, 2},
		9:  {20, 3},
		10: {20, 3},
		11: {20, 3},
		12: {20, 3},
		13: {20, 4},
		14: {20, 4},
		15: {19, 1},
		16: {19, 1},
		17: {19, 3},
		18: {19, 2},
		19: {19, 2},
		20: {19, 3},
		21: {19, 3},
		22: {19, 3},
		23: {19, 3},
		24: {19, 4},
		25: {19, 4},
		26: {22, 1},
		27: {22, 3},
		28: {22, 2},
		29: {22, 2},
		30: {22, 3},
		31: {22, 3},
		32: {22, 3},
		33: {22, 3},
		34: {22, 4},
		35: {22, 4},
		36: {22, 3},
		37: {22, 3},
		38: {22, 3},
		39: {22, 3},
		40: {22, 4},
		41: {22, 4},
		42: {22, 3},
		43: {22, 3},
		44: {22, 3},
		45: {22, 3},
		46: {22, 4},
		47: {22, 4},
		48: {31, 3},
		49: {31, 3},
		50: {31, 3},
		51: {31, 3},
		52: {31, 3},
		53: {31, 3},
		54: {28, 1},
		55: {28, 3},
		56: {21, 3},
		57: {21, 3},
		58: {21, 3},
		59: {21, 3},
		60: {21, 5},
		61: {21, 5},
		62: {21, 7},
		63: {27, 3},
		64: {27, 3},
		65: {27, 3},
		66: {27, 3},
		67: {27, 5},
		68: {27, 5},
		69: {27, 7},
		70: {18, 5},
		71: {18, 7},
		72: {18, 7},
		73: {18, 9},
		74: {8, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [164][]uint16{
		// 0
		{85, 84, 8: 81, 90, 83, 17: 89, 82, 86, 21: 87, 77, 27: 88, 79, 80, 76, 78},
		{5: 75},
		{136, 137, 138, 139, 5: 74, 11: 232, 227, 229, 231, 228, 230},
		{5: 73},
		{220, 5: 72},
		// 5
		{10: 217},
		{60, 60, 60, 60, 23: 211, 185},
		{59, 59, 59, 59, 23: 208, 182},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 201, 21: 87, 157},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 199, 21: 87, 200},
		// 10
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 197, 21: 87, 198},
		{127, 128, 129, 130},
		{49, 49, 49, 49, 49, 49, 49, 49, 11: 49, 49, 49, 49, 49, 49},
		{21, 5: 21},
		{8: 91, 90, 92},
		// 15
		{1, 1, 1, 1, 1, 1, 1, 1, 11: 1, 1, 1, 1, 1, 1, 23: 1, 1, 1, 1},
		{26: 120},
		{96, 95, 8: 93, 90, 94, 20: 97},
		{70, 70, 70, 70, 70, 70, 70, 70},
		{96, 95, 8: 93, 90, 94, 20: 118},
		// 20
		{96, 95, 8: 93, 90, 94, 20: 117},
		{96, 95, 8: 93, 90, 94, 20: 116},
		{98, 99, 100, 101, 102},
		{96, 95, 8: 93, 90, 94, 20: 115},
		{96, 95, 8: 93, 90, 94, 20: 114},
		// 25
		{96, 95, 8: 93, 90, 94, 20: 113},
		{96, 95, 8: 93, 90, 94, 20: 110},
		{26: 103},
		{8: 104, 90, 105},
		{25: 109},
		// 30
		{96, 95, 8: 93, 90, 94, 20: 106},
		{98, 99, 100, 101, 107},
		{25: 108},
		{2, 2, 2, 2, 2, 2, 2, 2, 11: 2, 2, 2, 2, 2, 2, 23: 2, 2},
		{4, 4, 4, 4, 4, 4, 4, 4, 11: 4, 4, 4, 4, 4, 4, 23: 4, 4},
		// 35
		{63, 63, 63, 63, 63, 63, 112, 111},
		{62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61},
		{64, 64, 64, 64, 64, 64, 64, 64},
		{65, 65, 100, 101, 65, 65, 65, 65},
		// 40
		{66, 66, 100, 101, 66, 66, 66, 66},
		{67, 67, 67, 67, 67, 67, 67, 67},
		{68, 68, 68, 68, 68, 68, 68, 68},
		{98, 99, 100, 101, 119},
		{69, 69, 69, 69, 69, 69, 69, 69},
		// 45
		{8: 121, 90, 122},
		{25: 126},
		{96, 95, 8: 93, 90, 94, 20: 123},
		{98, 99, 100, 101, 124},
		{25: 125},
		// 50
		{3, 3, 3, 3, 3, 3, 3, 3, 11: 3, 3, 3, 3, 3, 3, 23: 3, 3},
		{5, 5, 5, 5, 5, 5, 5, 5, 11: 5, 5, 5, 5, 5, 5, 23: 5, 5},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 195, 21: 87, 196},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 193, 21: 87, 194},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 191, 21: 87, 192},
		// 55
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 134, 21: 87, 135},
		{60, 60, 60, 60, 60, 60, 60, 60, 11: 60, 60, 60, 60, 60, 60, 24: 185},
		{59, 59, 59, 59, 59, 59, 59, 59, 11: 59, 59, 59, 59, 59, 59, 24: 182},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 156, 21: 87, 157},
		{52, 52, 52, 52, 52, 52, 155, 154, 11: 52, 52, 52, 52, 52, 52},
		// 60
		{36, 36, 36, 36, 36, 36, 141, 140, 11: 36, 36, 36, 36, 36, 36},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 152, 21: 87, 153},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 150, 21: 87, 151},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 148, 21: 87, 149},
		{85, 84, 8: 131, 90, 133, 17: 89, 132, 142, 21: 87, 143},
		// 65
		{35, 35, 35, 35, 35, 35, 35, 35, 11: 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 11: 34, 34, 34, 34, 34, 34},
		{30, 30, 30, 30, 30, 30, 147, 146, 11: 30, 30, 30, 30, 30, 30},
		{42, 42, 42, 42, 42, 42, 145, 144, 11: 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 11: 41, 41, 41, 41, 41, 41},
		// 70
		{40, 40, 40, 40, 40, 40, 40, 40, 11: 40, 40, 40, 40, 40, 40},
		{29, 29, 29, 29, 29, 29, 29, 29, 11: 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 11: 28, 28, 28, 28, 28, 28},
		{31, 31, 31, 31, 31, 31, 31, 31, 11: 31, 31, 31, 31, 31, 31},
		{43, 43, 43, 43, 43, 43, 43, 43, 11: 43, 43, 43, 43, 43, 43},
		// 75
		{32, 32, 129, 130, 32, 32, 32, 32, 11: 32, 32, 32, 32, 32, 32},
		{44, 44, 138, 139, 44, 44, 44, 44, 11: 44, 44, 44, 44, 44, 44},
		{33, 33, 129, 130, 33, 33, 33, 33, 11: 33, 33, 33, 33, 33, 33},
		{45, 45, 138, 139, 45, 45, 45, 45, 11: 45, 45, 45, 45, 45, 45},
		{51, 51, 51, 51, 51, 51, 51, 51, 11: 51, 51, 51, 51, 51, 51},
		// 80
		{50, 50, 50, 50, 50, 50, 50, 50, 11: 50, 50, 50, 50, 50, 50},
		{127, 128, 129, 130, 159},
		{136, 137, 138, 139, 158},
		{48, 48, 48, 48, 48, 48, 48, 48, 11: 48, 48, 48, 48, 48, 48},
		{58, 58, 58, 58, 58, 58, 58, 58, 11: 58, 58, 58, 58, 58, 58, 24: 160},
		// 85
		{8: 161, 90, 162},
		{15, 15, 15, 15, 15, 15, 15, 15, 11: 15, 15, 15, 15, 15, 15},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 168},
		{60, 60, 60, 60, 60, 6: 60, 60},
		{59, 59, 59, 59, 59, 6: 59, 59},
		// 90
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 180},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 179},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 178},
		{169, 170, 171, 172, 173},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 177},
		// 95
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 176},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 175},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 174},
		{13, 13, 13, 13, 13, 13, 13, 13, 11: 13, 13, 13, 13, 13, 13},
		{52, 52, 52, 52, 52, 6: 155, 154},
		// 100
		{53, 53, 53, 53, 53, 6: 53, 53},
		{54, 54, 171, 172, 54, 6: 54, 54},
		{55, 55, 171, 172, 55, 6: 55, 55},
		{56, 56, 56, 56, 56, 6: 56, 56},
		{57, 57, 57, 57, 57, 6: 57, 57},
		// 105
		{169, 170, 171, 172, 181},
		{58, 58, 58, 58, 58, 6: 58, 58},
		{8: 183, 90, 17: 89, 184},
		{18, 18, 18, 18, 18, 18, 18, 18, 11: 18, 18, 18, 18, 18, 18},
		{16, 16, 16, 16, 16, 16, 16, 16, 11: 16, 16, 16, 16, 16, 16},
		// 110
		{8: 186, 90, 188, 17: 89, 187},
		{19, 19, 19, 19, 19, 19, 19, 19, 11: 19, 19, 19, 19, 19, 19},
		{17, 17, 17, 17, 17, 17, 17, 17, 11: 17, 17, 17, 17, 17, 17},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 189},
		{169, 170, 171, 172, 190},
		// 115
		{14, 14, 14, 14, 14, 14, 14, 14, 11: 14, 14, 14, 14, 14, 14},
		{53, 53, 53, 53, 53, 53, 53, 53, 11: 53, 53, 53, 53, 53, 53},
		{37, 37, 37, 37, 37, 37, 37, 37, 11: 37, 37, 37, 37, 37, 37},
		{54, 54, 129, 130, 54, 54, 54, 54, 11: 54, 54, 54, 54, 54, 54},
		{38, 38, 138, 139, 38, 38, 38, 38, 11: 38, 38, 38, 38, 38, 38},
		// 120
		{55, 55, 129, 130, 55, 55, 55, 55, 11: 55, 55, 55, 55, 55, 55},
		{39, 39, 138, 139, 39, 39, 39, 39, 11: 39, 39, 39, 39, 39, 39},
		{56, 56, 56, 56, 56, 56, 56, 56, 11: 56, 56, 56, 56, 56, 56},
		{46, 46, 46, 46, 46, 46, 46, 46, 11: 46, 46, 46, 46, 46, 46},
		{57, 57, 57, 57, 57, 57, 57, 57, 11: 57, 57, 57, 57, 57, 57},
		// 125
		{47, 47, 47, 47, 47, 47, 47, 47, 11: 47, 47, 47, 47, 47, 47},
		{127, 128, 129, 130, 202},
		{58, 58, 58, 58, 23: 203, 160},
		{8: 204, 90, 205},
		{8, 5: 8},
		// 130
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 206},
		{169, 170, 171, 172, 207},
		{6, 5: 6},
		{8: 209, 90, 17: 89, 210},
		{11, 5: 11},
		// 135
		{9, 5: 9},
		{8: 212, 90, 214, 17: 89, 213},
		{12, 5: 12},
		{10, 5: 10},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 215},
		// 140
		{169, 170, 171, 172, 216},
		{7, 5: 7},
		{96, 95, 8: 93, 90, 94, 20: 218},
		{98, 99, 100, 101, 219},
		{5: 71},
		// 145
		{8: 222, 90, 224, 17: 89, 223, 27: 221},
		{20, 5: 20},
		{23: 211},
		{23: 208},
		{167, 166, 8: 163, 90, 165, 17: 89, 164, 225},
		// 150
		{169, 170, 171, 172, 226},
		{23: 203},
		{96, 95, 8: 93, 90, 94, 20: 238},
		{96, 95, 8: 93, 90, 94, 20: 237},
		{96, 95, 8: 93, 90, 94, 20: 236},
		// 155
		{96, 95, 8: 93, 90, 94, 20: 235},
		{96, 95, 8: 93, 90, 94, 20: 234},
		{96, 95, 8: 93, 90, 94, 20: 233},
		{98, 99, 100, 101, 5: 22},
		{98, 99, 100, 101, 5: 23},
		// 160
		{98, 99, 100, 101, 5: 24},
		{98, 99, 100, 101, 5: 25},
		{98, 99, 100, 101, 5: 26},
		{98, 99, 100, 101, 5: 27},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 34

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.node = ast.NewDRollExpr(yyS[yypt-0].node.Token(), yyS[yypt-0].node)
			yylex.(*LexerWrapper).ast = yyVAL.node
		}
	case 2:
		{
			yyVAL.node = ast.NewDRollComp(yyS[yypt-0].node.Token(), yyS[yypt-0].node)
			yylex.(*LexerWrapper).ast = yyVAL.node
		}
	case 3:
		{
			yyVAL.node = yyS[yypt-0].bRollList
			yylex.(*LexerWrapper).ast = yyVAL.node
		}
	case 4:
		{
			yyVAL.node = ast.NewCalc(yyS[yypt-3].token, yyS[yypt-1].node)
			yylex.(*LexerWrapper).ast = yyVAL.node
		}
	case 6:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 7:
		{
			yyVAL.node = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 8:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 9:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 10:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 11:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 12:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 13:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 14:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 17:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 18:
		{
			yyVAL.node = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 19:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 20:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 21:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 22:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 23:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 24:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 25:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 27:
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 28:
		{
			yyVAL.node = ast.NewUnaryMinus(yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 29:
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 30:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 31:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 32:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 33:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 34:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 35:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 36:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 37:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 38:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 39:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 40:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 41:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 42:
		{
			yyVAL.node = ast.NewAdd(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 43:
		{
			yyVAL.node = ast.NewSubtract(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 44:
		{
			yyVAL.node = ast.NewMultiply(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 45:
		{
			yyVAL.node = ast.NewDivideWithRoundingDown(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 46:
		{
			yyVAL.node = ast.NewDivideWithRoundingUp(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 47:
		{
			yyVAL.node = ast.NewDivideWithRounding(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 48:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 49:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 50:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 51:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 52:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 53:
		{
			yyVAL.node = ast.NewCompare(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 54:
		{
			yyVAL.bRollList = ast.NewBRollList(yyS[yypt-0].bRoll)
		}
	case 55:
		{
			yyVAL.bRollList.Append(yyS[yypt-0].bRoll)
		}
	case 56:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 57:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 58:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 59:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 60:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-3].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 61:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-4].node, yyS[yypt-3].token, yyS[yypt-1].node)
		}
	case 62:
		{
			yyVAL.node = ast.NewDRoll(yyS[yypt-5].node, yyS[yypt-3].token, yyS[yypt-1].node)
		}
	case 63:
		{
			yyVAL.bRoll = ast.NewBRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 64:
		{
			yyVAL.bRoll = ast.NewBRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 65:
		{
			yyVAL.bRoll = ast.NewBRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 66:
		{
			yyVAL.bRoll = ast.NewBRoll(yyS[yypt-2].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 67:
		{
			yyVAL.bRoll = ast.NewBRoll(yyS[yypt-3].node, yyS[yypt-1].token, yyS[yypt-0].node)
		}
	case 68:
		{
			yyVAL.bRoll = ast.NewBRoll(yyS[yypt-4].node, yyS[yypt-3].token, yyS[yypt-1].node)
		}
	case 69:
		{
			yyVAL.bRoll = ast.NewBRoll(yyS[yypt-5].node, yyS[yypt-3].token, yyS[yypt-1].node)
		}
	case 70:
		{
			yyVAL.node = ast.NewRandomNumber(yyS[yypt-3].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 71:
		{
			yyVAL.node = ast.NewRandomNumber(yyS[yypt-4].node, yyS[yypt-2].token, yyS[yypt-1].node)
		}
	case 72:
		{
			yyVAL.node = ast.NewRandomNumber(yyS[yypt-5].node, yyS[yypt-4].token, yyS[yypt-2].node)
		}
	case 73:
		{
			yyVAL.node = ast.NewRandomNumber(yyS[yypt-6].node, yyS[yypt-4].token, yyS[yypt-2].node)
		}
	case 74:
		{
			// TODO: 整数が大きすぎるときなどのエラー処理が必要
			value, _ := strconv.Atoi(yyS[yypt-0].token.Literal)

			yyVAL.node = ast.NewInt(value, yyS[yypt-0].token)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// 字句解析器をyyParseで使用できるようにするためのラッパー。
type LexerWrapper struct {
	// 入力文字列
	Input string
	// 現在の桁
	Column int
	// 現在のルートノード
	ast ast.Node
	// 字句解析器
	lexer *lexer.Lexer
	// エラーの内容
	err string
}

// トークンの種類とyyParseで使用する定数との対応
var tokenTypeToYYTokenType = map[token.TokenType]int{
	token.ILLEGAL: ILLEGAL,

	token.IDENT: IDENT,
	token.INT:   INT,

	token.PLUS:     PLUS,
	token.MINUS:    MINUS,
	token.ASTERISK: ASTERISK,
	token.SLASH:    SLASH,

	token.EQ:      EQ,
	token.LT:      LT,
	token.GT:      GT,
	token.LTEQ:    LTEQ,
	token.GTEQ:    GTEQ,
	token.DIAMOND: DIAMOND,

	token.L_PAREN:   L_PAREN,
	token.R_PAREN:   R_PAREN,
	token.L_BRACKET: L_BRACKET,
	token.R_BRACKET: R_BRACKET,

	token.D:      D,
	token.B:      B,
	token.R:      R,
	token.U:      U,
	token.SECRET: SECRET,
	token.DOTS:   DOTS,

	token.CALC:   CALC,
	token.CHOICE: CHOICE,
}

// newLexerWrapper は新しい字句解析器ラッパーを作る。
//
// input: 入力文字列
func newLexerWrapper(input string) *LexerWrapper {
	lw := &LexerWrapper{
		Input: input,
		lexer: lexer.New(input),
	}

	return lw
}

// Lex は次のトークンを読み込み、対応する定数を返す。
//
// 文字列の終端に達した場合は0を返す。
func (lw *LexerWrapper) Lex(lval *yySymType) int {
	tok := lw.lexer.NextToken()
	lw.Column = tok.Column

	if tok.Type == token.EOT {
		return 0
	}

	lval.token = tok

	yyTokenType, ok := tokenTypeToYYTokenType[tok.Type]
	if !ok {
		return ILLEGAL
	}

	return yyTokenType
}

// Error は発生したエラーを記録する。
func (lw *LexerWrapper) Error(e string) {
	lw.err = fmt.Sprintf("column %d: %s", lw.Column, e)
}

// Parse は入力文字列をBCDiceコマンドとして構文解析する。
// 構文解析に成功した場合は、抽象構文木のルートノードを返す。
// 構文解析に失敗した場合は、エラーを返す。
func Parse(input string) (ast.Node, error) {
	lw := newLexerWrapper(input)

	if yyParse(lw) != 0 {
		return nil, fmt.Errorf(lw.err)
	} else {
		return lw.ast, nil
	}
}

/* vim: set filetype=goyacc: */
