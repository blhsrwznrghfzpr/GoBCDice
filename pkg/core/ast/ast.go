// BCDiceコマンドの抽象構文木のノードを定義するパッケージ。
//
// 抽象構文木のノードはいくつかの種類に分けられる。
//
// 一次式（primary expression）は、それ自身が値として評価されるノードである。
// 例として、整数（Int）や加算ロール（DRoll）がある。
// 一次式では、IsPrimaryExpression() がtrueとなる。
//
// 可変ノード（variable node）は、評価するごとに値が変化するノードである。
// 例として、加算ロール（DRoll）やランダム数値取り出し（RandomNumber）がある。
// 可変ノードでは、IsVariable() がtrueとなる。
//
// コマンド（command）は、トップレベルのコマンドのノードである。
// 例として、加算ロール式（DRollExpr）や計算（Calc）がある。
// コマンドは、引数にあたる式（Expression）を持つ。
//
// 前置式（PrefixExpression）は、前置演算子とその右の子ノード（Right）とで構成されるノードである。
// 例として、単項マイナスがある。
//
// 中置式（InfixExpression）は、中置演算子と左右の子ノード（Left、Right）とで構成されるノードである。
// 例として、加算（Add）、乗算（Multiply）、加算ロール（DRoll）がある。
// 中置式には左結合性および右結合性という概念があり、これは中置表記の生成において括弧で囲むかどうかを決めるために使われる。
// 例えば、加算（+）は左結合性かつ右結合性であるため、"1+(2+3)" と "1+2+3" は同じ結果となる。
// 一方、減算（-）は左結合性だが右結合性ではないため、"1-(2+3)" と "1-2+3" は異なる結果となる。
// つまり、減算の場合は括弧で囲むかどうかが結果に影響する。
//
// 詳しい使い方は、parserパッケージ、evaluatorパッケージ、notationパッケージを参照。
package ast
